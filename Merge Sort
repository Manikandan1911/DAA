class Solution {
    void merge(int arr[], int l, int mid, int r){
        // code here
        int n1= mid-l+1;
        int n2=r-mid;
        
        int[] leftArr = new int[n1];
        int[] rightArr = new int[n2];
        for(int i=0; i < n1; i++){
            leftArr[i]=arr[l+i];
        }
        for(int i=0; i < n2; i++){
            rightArr[i]=arr[mid+1+i];
        }
        int i=0, j=0, k=l;
        while(i<n1 && j<n2){
            if(leftArr[i]<=rightArr[j])
                arr[k++]=leftArr[i++];
            else
                arr[k++]=rightArr[j++];
        }
        while(i<n1){
            arr[k++]=leftArr[i++];
        }
        while(j<n2){
            arr[k++]=rightArr[j++];
        }
    }
    void mergeSort(int arr[], int l, int r) {
        if (l >= r) return;
        int mid = l + (r-l)/2;
        mergeSort(arr, l, mid); //Sort left half
        mergeSort(arr,mid + 1, r); //Sort right half
        merge(arr, l, mid, r);
    }

}
Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]
